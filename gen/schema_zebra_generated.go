package gen

// NOTE: THIS FILE WAS PRODUCED BY THE
// ZEBRAPACK CODE GENERATION TOOL (github.com/glycerine/zebrapack)
// DO NOT EDIT

import "github.com/glycerine/zebrapack/msgp"

// fieldsNotEmpty supports omitempty tags
func (z *Activity) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.PlanName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Day) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.BibleVersion) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.BibleProvider) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.AccountabilityStartDate == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (!z.AccountabilityVisible) // bool, omitempty
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MarshalMsg implements msgp.Marshaler
func (z *Activity) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// zid 0 for "PlanName"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.PlanName)
	}

	if !empty[1] {
		// zid 1 for "Day"
		o = append(o, 0x1)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Day)))
		for zlge := range z.Day {
			o = msgp.AppendInt(o, z.Day[zlge])
		}
	}

	if !empty[2] {
		// zid 2 for "BibleVersion"
		o = append(o, 0x2)
		o = msgp.AppendString(o, z.BibleVersion)
	}

	if !empty[3] {
		// zid 3 for "BibleProvider"
		o = append(o, 0x3)
		o = msgp.AppendString(o, z.BibleProvider)
	}

	if !empty[4] {
		// zid 4 for "AccountabilityStartDate"
		o = append(o, 0x4)
		o = msgp.AppendInt(o, z.AccountabilityStartDate)
	}

	if !empty[5] {
		// zid 5 for "AccountabilityVisible"
		o = append(o, 0x5)
		o = msgp.AppendBool(o, z.AccountabilityVisible)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Activity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Activity) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields0zcwe = 6

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields0zcwe uint32
	if !nbs.AlwaysNil {
		totalEncodedFields0zcwe, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft0zcwe := totalEncodedFields0zcwe
	missingFieldsLeft0zcwe := maxFields0zcwe - totalEncodedFields0zcwe

	var nextMiss0zcwe int = -1
	var found0zcwe [maxFields0zcwe]bool
	var curField0zcwe int

doneWithStruct0zcwe:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zcwe > 0 || missingFieldsLeft0zcwe > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zcwe, missingFieldsLeft0zcwe, msgp.ShowFound(found0zcwe[:]), unmarshalMsgFieldOrder0zcwe)
		if encodedFieldsLeft0zcwe > 0 {
			encodedFieldsLeft0zcwe--
			curField0zcwe, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss0zcwe < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss0zcwe = 0
			}
			for nextMiss0zcwe < maxFields0zcwe && (found0zcwe[nextMiss0zcwe] || unmarshalMsgFieldSkip0zcwe[nextMiss0zcwe]) {
				nextMiss0zcwe++
			}
			if nextMiss0zcwe == maxFields0zcwe {
				// filled all the empty fields!
				break doneWithStruct0zcwe
			}
			missingFieldsLeft0zcwe--
			curField0zcwe = nextMiss0zcwe
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zcwe)
		switch curField0zcwe {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "PlanName"
			found0zcwe[0] = true
			z.PlanName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "Day"
			found0zcwe[1] = true
			if nbs.AlwaysNil {
				(z.Day) = (z.Day)[:0]
			} else {

				var zefv uint32
				zefv, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Day) >= int(zefv) {
					z.Day = (z.Day)[:zefv]
				} else {
					z.Day = make([]int, zefv)
				}
				for zlge := range z.Day {
					z.Day[zlge], bts, err = nbs.ReadIntBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case 2:
			// zid 2 for "BibleVersion"
			found0zcwe[2] = true
			z.BibleVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 3:
			// zid 3 for "BibleProvider"
			found0zcwe[3] = true
			z.BibleProvider, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 4:
			// zid 4 for "AccountabilityStartDate"
			found0zcwe[4] = true
			z.AccountabilityStartDate, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case 5:
			// zid 5 for "AccountabilityVisible"
			found0zcwe[5] = true
			z.AccountabilityVisible, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zcwe != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Activity
var unmarshalMsgFieldOrder0zcwe = []string{"PlanName", "Day", "BibleVersion", "BibleProvider", "AccountabilityStartDate", "AccountabilityVisible"}

var unmarshalMsgFieldSkip0zcwe = []bool{false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Activity) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.PlanName) + 4 + msgp.ArrayHeaderSize + (len(z.Day) * (msgp.IntSize)) + 13 + msgp.StringPrefixSize + len(z.BibleVersion) + 14 + msgp.StringPrefixSize + len(z.BibleProvider) + 24 + msgp.IntSize + 22 + msgp.BoolSize
	return
}

// fieldsNotEmpty supports omitempty tags
func (z *Activity00) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (len(z.PlanName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.CurrentDay == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Done) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.BibleVersion) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.BibleProvider) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.AccountabilityStartDate == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (!z.AccountabilityVisible) // bool, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MarshalMsg implements msgp.Marshaler
func (z *Activity00) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// zid 0 for "PlanName"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.PlanName)
	}

	if !empty[1] {
		// zid 1 for "CurrentDay"
		o = append(o, 0x1)
		o = msgp.AppendInt(o, z.CurrentDay)
	}

	if !empty[2] {
		// zid 2 for "Done"
		o = append(o, 0x2)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Done)))
		for zntf := range z.Done {
			o = msgp.AppendBool(o, z.Done[zntf])
		}
	}

	if !empty[3] {
		// zid 3 for "BibleVersion"
		o = append(o, 0x3)
		o = msgp.AppendString(o, z.BibleVersion)
	}

	if !empty[4] {
		// zid 4 for "BibleProvider"
		o = append(o, 0x4)
		o = msgp.AppendString(o, z.BibleProvider)
	}

	if !empty[5] {
		// zid 5 for "AccountabilityStartDate"
		o = append(o, 0x5)
		o = msgp.AppendInt(o, z.AccountabilityStartDate)
	}

	if !empty[6] {
		// zid 6 for "AccountabilityVisible"
		o = append(o, 0x6)
		o = msgp.AppendBool(o, z.AccountabilityVisible)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Activity00) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Activity00) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields1zbkd = 7

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields1zbkd uint32
	if !nbs.AlwaysNil {
		totalEncodedFields1zbkd, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft1zbkd := totalEncodedFields1zbkd
	missingFieldsLeft1zbkd := maxFields1zbkd - totalEncodedFields1zbkd

	var nextMiss1zbkd int = -1
	var found1zbkd [maxFields1zbkd]bool
	var curField1zbkd int

doneWithStruct1zbkd:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zbkd > 0 || missingFieldsLeft1zbkd > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zbkd, missingFieldsLeft1zbkd, msgp.ShowFound(found1zbkd[:]), unmarshalMsgFieldOrder1zbkd)
		if encodedFieldsLeft1zbkd > 0 {
			encodedFieldsLeft1zbkd--
			curField1zbkd, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss1zbkd < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss1zbkd = 0
			}
			for nextMiss1zbkd < maxFields1zbkd && (found1zbkd[nextMiss1zbkd] || unmarshalMsgFieldSkip1zbkd[nextMiss1zbkd]) {
				nextMiss1zbkd++
			}
			if nextMiss1zbkd == maxFields1zbkd {
				// filled all the empty fields!
				break doneWithStruct1zbkd
			}
			missingFieldsLeft1zbkd--
			curField1zbkd = nextMiss1zbkd
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zbkd)
		switch curField1zbkd {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "PlanName"
			found1zbkd[0] = true
			z.PlanName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "CurrentDay"
			found1zbkd[1] = true
			z.CurrentDay, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "Done"
			found1zbkd[2] = true
			if nbs.AlwaysNil {
				(z.Done) = (z.Done)[:0]
			} else {

				var zegg uint32
				zegg, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Done) >= int(zegg) {
					z.Done = (z.Done)[:zegg]
				} else {
					z.Done = make([]bool, zegg)
				}
				for zntf := range z.Done {
					z.Done[zntf], bts, err = nbs.ReadBoolBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case 3:
			// zid 3 for "BibleVersion"
			found1zbkd[3] = true
			z.BibleVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 4:
			// zid 4 for "BibleProvider"
			found1zbkd[4] = true
			z.BibleProvider, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 5:
			// zid 5 for "AccountabilityStartDate"
			found1zbkd[5] = true
			z.AccountabilityStartDate, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case 6:
			// zid 6 for "AccountabilityVisible"
			found1zbkd[6] = true
			z.AccountabilityVisible, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zbkd != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Activity00
var unmarshalMsgFieldOrder1zbkd = []string{"PlanName", "CurrentDay", "Done", "BibleVersion", "BibleProvider", "AccountabilityStartDate", "AccountabilityVisible"}

var unmarshalMsgFieldSkip1zbkd = []bool{false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Activity00) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.PlanName) + 11 + msgp.IntSize + 5 + msgp.ArrayHeaderSize + (len(z.Done) * (msgp.BoolSize)) + 13 + msgp.StringPrefixSize + len(z.BibleVersion) + 14 + msgp.StringPrefixSize + len(z.BibleProvider) + 24 + msgp.IntSize + 22 + msgp.BoolSize
	return
}

// fieldsNotEmpty supports omitempty tags
func (z *User) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 8
	}
	var fieldsInUse uint32 = 8
	isempty[0] = (len(z.Password) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FirstName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.LastName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.BibleVersion) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.BibleProvider) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.LastNotificationSeen == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.CreatedTime == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.OrigEmail) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MarshalMsg implements msgp.Marshaler
func (z *User) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [8]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// zid 0 for "Password"
		o = append(o, 0x0)
		o = msgp.AppendBytes(o, z.Password)
	}

	if !empty[1] {
		// zid 1 for "FirstName"
		o = append(o, 0x1)
		o = msgp.AppendString(o, z.FirstName)
	}

	if !empty[2] {
		// zid 2 for "LastName"
		o = append(o, 0x2)
		o = msgp.AppendString(o, z.LastName)
	}

	if !empty[3] {
		// zid 3 for "BibleVersion"
		o = append(o, 0x3)
		o = msgp.AppendString(o, z.BibleVersion)
	}

	if !empty[4] {
		// zid 4 for "BibleProvider"
		o = append(o, 0x4)
		o = msgp.AppendString(o, z.BibleProvider)
	}

	if !empty[5] {
		// zid 5 for "LastNotificationSeen"
		o = append(o, 0x5)
		o = msgp.AppendInt64(o, z.LastNotificationSeen)
	}

	if !empty[6] {
		// zid 6 for "CreatedTime"
		o = append(o, 0x6)
		o = msgp.AppendInt64(o, z.CreatedTime)
	}

	if !empty[7] {
		// zid 7 for "OrigEmail"
		o = append(o, 0x7)
		o = msgp.AppendString(o, z.OrigEmail)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *User) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *User) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields2zsnt = 8

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields2zsnt uint32
	if !nbs.AlwaysNil {
		totalEncodedFields2zsnt, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft2zsnt := totalEncodedFields2zsnt
	missingFieldsLeft2zsnt := maxFields2zsnt - totalEncodedFields2zsnt

	var nextMiss2zsnt int = -1
	var found2zsnt [maxFields2zsnt]bool
	var curField2zsnt int

doneWithStruct2zsnt:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zsnt > 0 || missingFieldsLeft2zsnt > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zsnt, missingFieldsLeft2zsnt, msgp.ShowFound(found2zsnt[:]), unmarshalMsgFieldOrder2zsnt)
		if encodedFieldsLeft2zsnt > 0 {
			encodedFieldsLeft2zsnt--
			curField2zsnt, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss2zsnt < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss2zsnt = 0
			}
			for nextMiss2zsnt < maxFields2zsnt && (found2zsnt[nextMiss2zsnt] || unmarshalMsgFieldSkip2zsnt[nextMiss2zsnt]) {
				nextMiss2zsnt++
			}
			if nextMiss2zsnt == maxFields2zsnt {
				// filled all the empty fields!
				break doneWithStruct2zsnt
			}
			missingFieldsLeft2zsnt--
			curField2zsnt = nextMiss2zsnt
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zsnt)
		switch curField2zsnt {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "Password"
			found2zsnt[0] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Password = z.Password[:0]
			} else {
				z.Password, bts, err = nbs.ReadBytesBytes(bts, z.Password)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "FirstName"
			found2zsnt[1] = true
			z.FirstName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "LastName"
			found2zsnt[2] = true
			z.LastName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 3:
			// zid 3 for "BibleVersion"
			found2zsnt[3] = true
			z.BibleVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 4:
			// zid 4 for "BibleProvider"
			found2zsnt[4] = true
			z.BibleProvider, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 5:
			// zid 5 for "LastNotificationSeen"
			found2zsnt[5] = true
			z.LastNotificationSeen, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 6:
			// zid 6 for "CreatedTime"
			found2zsnt[6] = true
			z.CreatedTime, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 7:
			// zid 7 for "OrigEmail"
			found2zsnt[7] = true
			z.OrigEmail, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zsnt != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of User
var unmarshalMsgFieldOrder2zsnt = []string{"Password", "FirstName", "LastName", "BibleVersion", "BibleProvider", "LastNotificationSeen", "CreatedTime", "OrigEmail"}

var unmarshalMsgFieldSkip2zsnt = []bool{false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *User) Msgsize() (s int) {
	s = 1 + 9 + msgp.BytesPrefixSize + len(z.Password) + 10 + msgp.StringPrefixSize + len(z.FirstName) + 9 + msgp.StringPrefixSize + len(z.LastName) + 13 + msgp.StringPrefixSize + len(z.BibleVersion) + 14 + msgp.StringPrefixSize + len(z.BibleProvider) + 21 + msgp.Int64Size + 12 + msgp.Int64Size + 10 + msgp.StringPrefixSize + len(z.OrigEmail)
	return
}

// FileSchema_zebra_generated_go holds ZebraPack schema from file 'schema.go'
type FileSchema_zebra_generated_go struct{}

// ZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 3120 bytes
func (FileSchema_zebra_generated_go) ZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x85, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xa9, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
		0x67, 0x6f, 0xad, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
		0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0xa3, 0x67, 0x65, 0x6e,
		0xad, 0x5a, 0x65, 0x62, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65,
		0x6d, 0x61, 0x49, 0x64, 0x00, 0xa7, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x73, 0x83, 0xa4, 0x55, 0x73, 0x65, 0x72, 0x82,
		0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
		0x65, 0xa4, 0x55, 0x73, 0x65, 0x72, 0xa6, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x73, 0x98, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
		0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77,
		0x6f, 0x72, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x5b, 0x5d, 0x62,
		0x79, 0x74, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x01, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x01, 0xa3, 0x53, 0x74, 0x72, 0xa5,
		0x62, 0x79, 0x74, 0x65, 0x73, 0x87, 0xa3, 0x5a, 0x69, 0x64,
		0x01, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
		0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x46, 0x69, 0x72,
		0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53,
		0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x02, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x4c, 0x61,
		0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa8,
		0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x03, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xac,
		0x42, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
		0x6f, 0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x42, 0x69, 0x62, 0x6c,
		0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xad,
		0x42, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
		0x64, 0x65, 0x72, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x42, 0x69, 0x62,
		0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x05, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xb4, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
		0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
		0x65, 0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xb4, 0x4c, 0x61, 0x73, 0x74,
		0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
		0x6f, 0x6e, 0x53, 0x65, 0x65, 0x6e, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5,
		0x69, 0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17,
		0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
		0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74,
		0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x06, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xab, 0x43, 0x72, 0x65, 0x61,
		0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xab, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
		0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36,
		0x34, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x11, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e,
		0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x07, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xa9, 0x4f, 0x72, 0x69, 0x67, 0x45, 0x6d, 0x61, 0x69,
		0x6c, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x4f, 0x72, 0x69, 0x67, 0x45,
		0x6d, 0x61, 0x69, 0x6c, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
		0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xaa, 0x41, 0x63,
		0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x30, 0x30, 0x82, 0xaa,
		0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
		0xaa, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x30,
		0x30, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x97, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x50, 0x6c,
		0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa8,
		0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xaa,
		0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xaa, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
		0x74, 0x44, 0x61, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e,
		0x74, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x0d, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x0d, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e,
		0x74, 0x86, 0xa3, 0x5a, 0x69, 0x64, 0x02, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa4,
		0x44, 0x6f, 0x6e, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x44, 0x6f,
		0x6e, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x5b, 0x5d, 0x62, 0x6f,
		0x6f, 0x6c, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xa3, 0x53,
		0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xa6, 0x44,
		0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x12, 0xa3, 0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f,
		0x6c, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x03, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xac,
		0x42, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
		0x6f, 0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x42, 0x69, 0x62, 0x6c,
		0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xad,
		0x42, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
		0x64, 0x65, 0x72, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x42, 0x69, 0x62,
		0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x05, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xb7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61,
		0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72,
		0x74, 0x44, 0x61, 0x74, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xb7, 0x41,
		0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c,
		0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
		0x74, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
		0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x0d,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x0d, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x06, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xb5, 0x41, 0x63,
		0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
		0x74, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xb5, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
		0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x69, 0x73,
		0x69, 0x62, 0x6c, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f,
		0x6f, 0x6c, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x12, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x12, 0xa3, 0x53, 0x74, 0x72, 0xa4, 0x62,
		0x6f, 0x6f, 0x6c, 0xa8, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
		0x74, 0x79, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
		0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x41, 0x63, 0x74, 0x69, 0x76,
		0x69, 0x74, 0x79, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
		0x96, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa8,
		0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xa8, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0x86, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xa3, 0x44, 0x61, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x44,
		0x61, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x5b, 0x5d, 0x69, 0x6e,
		0x74, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
		0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xa3, 0x53, 0x74,
		0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xa6, 0x44, 0x6f,
		0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x0d, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x02, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x42, 0x69,
		0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xac, 0x42, 0x69, 0x62, 0x6c, 0x65, 0x56,
		0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53,
		0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x03, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x42, 0x69,
		0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
		0x72, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xad, 0x42, 0x69, 0x62, 0x6c, 0x65,
		0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xb7,
		0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69,
		0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
		0x61, 0x74, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xb7, 0x41, 0x63, 0x63,
		0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
		0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x0d, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x0d, 0xa3,
		0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x05, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xb5, 0x41, 0x63, 0x63, 0x6f,
		0x75, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
		0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xb5, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62,
		0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62,
		0x6c, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x12, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x12, 0xa3, 0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f,
		0x6c, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x90,
	}
}

// ZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 3893 bytes
func (FileSchema_zebra_generated_go) ZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"schema.go","SourcePackage":"gen","ZebraSchemaId":0,"Structs":{"User":{"StructName":"User","Fields":[{"Zid":0,"FieldGoName":"Password","FieldTagName":"Password","FieldTypeStr":"[]byte","FieldCategory":23,"FieldPrimitive":1,"FieldFullType":{"Kind":1,"Str":"bytes"}},{"Zid":1,"FieldGoName":"FirstName","FieldTagName":"FirstName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":2,"FieldGoName":"LastName","FieldTagName":"LastName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":3,"FieldGoName":"BibleVersion","FieldTagName":"BibleVersion","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":4,"FieldGoName":"BibleProvider","FieldTagName":"BibleProvider","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":5,"FieldGoName":"LastNotificationSeen","FieldTagName":"LastNotificationSeen","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":6,"FieldGoName":"CreatedTime","FieldTagName":"CreatedTime","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":7,"FieldGoName":"OrigEmail","FieldTagName":"OrigEmail","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}}]},"Activity00":{"StructName":"Activity00","Fields":[{"Zid":0,"FieldGoName":"PlanName","FieldTagName":"PlanName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":1,"FieldGoName":"CurrentDay","FieldTagName":"CurrentDay","FieldTypeStr":"int","FieldCategory":23,"FieldPrimitive":13,"FieldFullType":{"Kind":13,"Str":"int"}},{"Zid":2,"FieldGoName":"Done","FieldTagName":"Done","FieldTypeStr":"[]bool","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":18,"Str":"bool"}}},{"Zid":3,"FieldGoName":"BibleVersion","FieldTagName":"BibleVersion","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":4,"FieldGoName":"BibleProvider","FieldTagName":"BibleProvider","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":5,"FieldGoName":"AccountabilityStartDate","FieldTagName":"AccountabilityStartDate","FieldTypeStr":"int","FieldCategory":23,"FieldPrimitive":13,"FieldFullType":{"Kind":13,"Str":"int"}},{"Zid":6,"FieldGoName":"AccountabilityVisible","FieldTagName":"AccountabilityVisible","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"}}]},"Activity":{"StructName":"Activity","Fields":[{"Zid":0,"FieldGoName":"PlanName","FieldTagName":"PlanName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":1,"FieldGoName":"Day","FieldTagName":"Day","FieldTypeStr":"[]int","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":13,"Str":"int"}}},{"Zid":2,"FieldGoName":"BibleVersion","FieldTagName":"BibleVersion","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":3,"FieldGoName":"BibleProvider","FieldTagName":"BibleProvider","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":4,"FieldGoName":"AccountabilityStartDate","FieldTagName":"AccountabilityStartDate","FieldTypeStr":"int","FieldCategory":23,"FieldPrimitive":13,"FieldFullType":{"Kind":13,"Str":"int"}},{"Zid":5,"FieldGoName":"AccountabilityVisible","FieldTagName":"AccountabilityVisible","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"}}]}},"Imports":[]}`)
}

// ZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 9768 bytes
func (FileSchema_zebra_generated_go) ZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "schema.go",
    "SourcePackage": "gen",
    "ZebraSchemaId": 0,
    "Structs": {
        "User": {
            "StructName": "User",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Password",
                    "FieldTagName": "Password",
                    "FieldTypeStr": "[]byte",
                    "FieldCategory": 23,
                    "FieldPrimitive": 1,
                    "FieldFullType": {
                        "Kind": 1,
                        "Str": "bytes"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "FirstName",
                    "FieldTagName": "FirstName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "LastName",
                    "FieldTagName": "LastName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 3,
                    "FieldGoName": "BibleVersion",
                    "FieldTagName": "BibleVersion",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 4,
                    "FieldGoName": "BibleProvider",
                    "FieldTagName": "BibleProvider",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 5,
                    "FieldGoName": "LastNotificationSeen",
                    "FieldTagName": "LastNotificationSeen",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 6,
                    "FieldGoName": "CreatedTime",
                    "FieldTagName": "CreatedTime",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 7,
                    "FieldGoName": "OrigEmail",
                    "FieldTagName": "OrigEmail",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                }
            ]
        },
        "Activity00": {
            "StructName": "Activity00",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "PlanName",
                    "FieldTagName": "PlanName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "CurrentDay",
                    "FieldTagName": "CurrentDay",
                    "FieldTypeStr": "int",
                    "FieldCategory": 23,
                    "FieldPrimitive": 13,
                    "FieldFullType": {
                        "Kind": 13,
                        "Str": "int"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "Done",
                    "FieldTagName": "Done",
                    "FieldTypeStr": "[]bool",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 18,
                            "Str": "bool"
                        }
                    }
                },
                {
                    "Zid": 3,
                    "FieldGoName": "BibleVersion",
                    "FieldTagName": "BibleVersion",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 4,
                    "FieldGoName": "BibleProvider",
                    "FieldTagName": "BibleProvider",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 5,
                    "FieldGoName": "AccountabilityStartDate",
                    "FieldTagName": "AccountabilityStartDate",
                    "FieldTypeStr": "int",
                    "FieldCategory": 23,
                    "FieldPrimitive": 13,
                    "FieldFullType": {
                        "Kind": 13,
                        "Str": "int"
                    }
                },
                {
                    "Zid": 6,
                    "FieldGoName": "AccountabilityVisible",
                    "FieldTagName": "AccountabilityVisible",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    }
                }
            ]
        },
        "Activity": {
            "StructName": "Activity",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "PlanName",
                    "FieldTagName": "PlanName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Day",
                    "FieldTagName": "Day",
                    "FieldTypeStr": "[]int",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 13,
                            "Str": "int"
                        }
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "BibleVersion",
                    "FieldTagName": "BibleVersion",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 3,
                    "FieldGoName": "BibleProvider",
                    "FieldTagName": "BibleProvider",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 4,
                    "FieldGoName": "AccountabilityStartDate",
                    "FieldTagName": "AccountabilityStartDate",
                    "FieldTypeStr": "int",
                    "FieldCategory": 23,
                    "FieldPrimitive": 13,
                    "FieldFullType": {
                        "Kind": 13,
                        "Str": "int"
                    }
                },
                {
                    "Zid": 5,
                    "FieldGoName": "AccountabilityVisible",
                    "FieldTagName": "AccountabilityVisible",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    }
                }
            ]
        }
    },
    "Imports": []
}`)
}
